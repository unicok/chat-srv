// Code generated by protoc-gen-go.
// source: chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	Nil
	Message
	Id
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Nil struct {
}

func (m *Nil) Reset()                    { *m = Nil{} }
func (m *Nil) String() string            { return proto.CompactTextString(m) }
func (*Nil) ProtoMessage()               {}
func (*Nil) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Message struct {
	Id   uint64 `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
	Body []byte `protobuf:"bytes,2,opt,name=Body,json=body,proto3" json:"Body,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Id struct {
	Id uint64 `protobuf:"varint,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Nil)(nil), "chat.Nil")
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*Id)(nil), "chat.Id")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Chat service

type ChatClient interface {
	Subscribe(ctx context.Context, in *Id, opts ...client.CallOption) (Chat_SubscribeClient, error)
	Send(ctx context.Context, in *Message, opts ...client.CallOption) (*Nil, error)
	Reg(ctx context.Context, in *Id, opts ...client.CallOption) (*Nil, error)
}

type chatClient struct {
	c           client.Client
	serviceName string
}

func NewChatClient(serviceName string, c client.Client) ChatClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "chat"
	}
	return &chatClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *chatClient) Subscribe(ctx context.Context, in *Id, opts ...client.CallOption) (Chat_SubscribeClient, error) {
	req := c.c.NewRequest(c.serviceName, "Chat.Subscribe", &Id{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &chatSubscribeClient{stream}, nil
}

type Chat_SubscribeClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*Message, error)
}

type chatSubscribeClient struct {
	stream client.Streamer
}

func (x *chatSubscribeClient) Close() error {
	return x.stream.Close()
}

func (x *chatSubscribeClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chatSubscribeClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chatSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) Send(ctx context.Context, in *Message, opts ...client.CallOption) (*Nil, error) {
	req := c.c.NewRequest(c.serviceName, "Chat.Send", in)
	out := new(Nil)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Reg(ctx context.Context, in *Id, opts ...client.CallOption) (*Nil, error) {
	req := c.c.NewRequest(c.serviceName, "Chat.Reg", in)
	out := new(Nil)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chat service

type ChatHandler interface {
	Subscribe(context.Context, *Id, Chat_SubscribeStream) error
	Send(context.Context, *Message, *Nil) error
	Reg(context.Context, *Id, *Nil) error
}

func RegisterChatHandler(s server.Server, hdlr ChatHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Chat{hdlr}, opts...))
}

type Chat struct {
	ChatHandler
}

func (h *Chat) Subscribe(ctx context.Context, stream server.Streamer) error {
	m := new(Id)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ChatHandler.Subscribe(ctx, m, &chatSubscribeStream{stream})
}

type Chat_SubscribeStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Message) error
}

type chatSubscribeStream struct {
	stream server.Streamer
}

func (x *chatSubscribeStream) Close() error {
	return x.stream.Close()
}

func (x *chatSubscribeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *chatSubscribeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *chatSubscribeStream) Send(m *Message) error {
	return x.stream.Send(m)
}

func (h *Chat) Send(ctx context.Context, in *Message, out *Nil) error {
	return h.ChatHandler.Send(ctx, in, out)
}

func (h *Chat) Reg(ctx context.Context, in *Id, out *Nil) error {
	return h.ChatHandler.Reg(ctx, in, out)
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x48, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x58, 0xb9, 0x98, 0xfd, 0x32,
	0x73, 0x94, 0x74, 0xb9, 0xd8, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x85, 0xf8, 0xb8, 0x98,
	0x3c, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82, 0x98, 0x32, 0x53, 0x84, 0x84, 0xb8, 0x58,
	0x9c, 0xf2, 0x53, 0x2a, 0x25, 0x98, 0x14, 0x18, 0x35, 0x78, 0x82, 0x58, 0x92, 0xf2, 0x53, 0x2a,
	0x95, 0x44, 0x40, 0x6a, 0xd0, 0x55, 0x1a, 0xe5, 0x70, 0xb1, 0x38, 0x67, 0x24, 0x96, 0x08, 0xa9,
	0x71, 0x71, 0x06, 0x97, 0x26, 0x15, 0x27, 0x17, 0x65, 0x26, 0xa5, 0x0a, 0x71, 0xe8, 0x81, 0xed,
	0xf4, 0x4c, 0x91, 0xe2, 0x85, 0xb0, 0xa0, 0xf6, 0x18, 0x30, 0x0a, 0x29, 0x70, 0xb1, 0x04, 0xa7,
	0xe6, 0xa5, 0x08, 0xa1, 0x4a, 0x48, 0x71, 0x42, 0xb8, 0x7e, 0x99, 0x39, 0x42, 0x52, 0x5c, 0xcc,
	0x41, 0xa9, 0xe9, 0x48, 0x66, 0x20, 0xe4, 0x92, 0xd8, 0xc0, 0xde, 0x30, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x8f, 0x97, 0x9d, 0x3a, 0xd4, 0x00, 0x00, 0x00,
}
